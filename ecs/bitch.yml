AWSTemplateFormatVersion: 2010-09-09
Parameters:
  #  VpcId:
  #    Type: String
  #    Default: "vpc-0593add1b5808f108"
  #  Subnet:
  #    Type: String
  #    Default: "subnet-0197bc91e37f0c461"
  VPCName:
    Description: CIDR range for our VPC
    Type: String
    Default: LakesideVPC
  VPCCidr:
    Description: CIDR range for our VPC
    Type: String
    Default: 10.0.0.0/16
  PrivateSubnetACidr:
    Description: Private Subnet IP Range
    Type: String
    Default: 10.0.0.0/24
  PrivateSubnetBCidr:
    Description: Private Subnet IP Range
    Type: String
    Default: 10.0.1.0/24
  PublicSubnetACidr:
    Description: Public Subnet IP Range
    Type: String
    Default: 10.0.2.0/24
  PublicSubnetBCidr:
    Description: Public Subnet IP Range
    Type: String
    Default: 10.0.3.0/24
  AvailabilityZoneA:
    Description: Avaibalbility Zone 1
    Type: String
    Default: eu-central-1a
  AvailabilityZoneB:
    Description: Avaibalbility Zone 2
    Type: String
    Default: eu-central-1b

  CustomerCoreServiceName:
    Type: String
    Default: "customer-core"
  CustomerManagementBackendName:
    Type: String
    Default: "customer-management-backend"
  CustomerSelfServiceBackendName:
    Type: String
    Default: "customer-self-service-backend"
  PolicyManagementBackendName:
    Type: String
    Default: "policy-management-backend"
  RiskManagementServerName:
    Type: String
    Default: "risk-management-server"
  SpringBootAdminName:
    Type: String
    Default: "spring-boot-admin"
  CustomerManagementFrontendName:
    Type: String
    Default: "customer-management-frontend"
  CustomerSelfServiceFrontendName:
    Type: String
    Default: "customer-self-service-frontend"
  PolicyManagementFrontendName:
    Type: String
    Default: "policy-management-frontend"
  RiskManagementClientName:
    Type: String
    Default: "risk-management-client"

Resources:
  # VPC, SUBNETS
  LakesideVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VPCCidr
      Tags:
        - Key: Name
          Value: !Ref VPCName
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LakesideVPC
      AvailabilityZone: !Ref AvailabilityZoneA
      CidrBlock: !Ref PrivateSubnetACidr
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PrivateSubnetA'
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LakesideVPC
      AvailabilityZone: !Ref AvailabilityZoneB
      CidrBlock: !Ref PrivateSubnetBCidr
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PrivateSubnetB'
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LakesideVPC
      AvailabilityZone: !Ref AvailabilityZoneA
      CidrBlock: !Ref PublicSubnetACidr
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PrivateSubnetA'
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LakesideVPC
      AvailabilityZone: !Ref AvailabilityZoneB
      CidrBlock: !Ref PublicSubnetBCidr
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-PrivateSubnetB'

  # GATEWAYS, ROUTES
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LakesideVPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LakesideVPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  # IP, NAT GATEWAY, ROUTES
  ElasticIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  ElasticIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPA.AllocationId
      SubnetId: !Ref PublicSubnetA
  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPB.AllocationId
      SubnetId: !Ref PublicSubnetB
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LakesideVPC
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LakesideVPC
  PrivateRouteToInternetA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA
  PrivateRouteToInternetB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB
  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA
  PrivateSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB


  # LOAD BALANCERS
  PrivateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
        # The load balancer is placed into the private subnets
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref PrivateLoadBalancersSecurityGroup

  #Allowing access to the internal loadbalancer only from the security group
  # of the frontend containers
  PrivateLoadBalancerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allowing access to the private ALB only from frontend containers SG
      GroupId: !Ref PrivateLoadBalancersSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ECSSecurityGroup

  DummyTargetGroupPrivate:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref LakesideVPC

  PrivateLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref DummyTargetGroupPrivate
          Type: forward
      LoadBalancerArn: !Ref PrivateLoadBalancer
      Port: 80
      Protocol: HTTP


  # ECS CLUSTER

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: lakeside-cluster

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: lakeside-log-group

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lakeside-backend-execution-role-1
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # SECURITY GROUPS
  PublicLoadBalancersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref LakesideVPC
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  PrivateLoadBalancersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref LakesideVPC

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public ECS containers
      VpcId: !Ref LakesideVPC

  ECSInternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS private containers
      VpcId: !Ref LakesideVPC

  ECSSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancersSecurityGroup

  ECSSecurityGroupIngressFromPrivateALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the private ALB
      GroupId: !Ref ECSInternalSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PrivateLoadBalancersSecurityGroup

  ECSSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref ECSInternalSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ECSInternalSecurityGroup

  ECSSecurityGroupIngressFromSelfPublic:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ECSSecurityGroup








  # SPRING BOOT ADMIN
  SpringBootAdminTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref SpringBootAdminName
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Cpu: 256
      Memory: 512
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        OperatingSystemFamily: LINUX
        CpuArchitecture: ARM64
      ContainerDefinitions:
        - Name: !Ref SpringBootAdminName
          Image: 063725538836.dkr.ecr.eu-central-1.amazonaws.com/spring-boot-admin:latest
          Environment:
            - Name: SERVER_PORT
              Value: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: eu-central-1
              awslogs-stream-prefix: !Ref SpringBootAdminName
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
  SpringBootAdminECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - SpringBootAdminLoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Ref SpringBootAdminName
      TaskDefinition: !Ref SpringBootAdminTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 120
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PublicSubnetA
            - !Ref PublicSubnetB
      LoadBalancers:
        - ContainerName: !Ref SpringBootAdminName
          ContainerPort: 80
          TargetGroupArn: !Ref SpringBootAdminTargetGroup
  SpringBootAdminTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      TargetType: ip
      Name: !Ref SpringBootAdminName
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref LakesideVPC
  SpringBootAdminLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref PublicLoadBalancersSecurityGroup
  SpringBootAdminLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref SpringBootAdminTargetGroup
          Type: forward
      LoadBalancerArn: !Ref SpringBootAdminLoadBalancer
      Port: 80
      Protocol: HTTP
